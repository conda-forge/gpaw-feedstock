From ffa9afe907b59758affd3818182570929323a4f2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Jan=C3=9Fen?= <janssen@mpie.de>
Date: Sat, 4 Oct 2025 10:47:13 +0200
Subject: [PATCH] Fully support mpi4py

---
 gpaw/mpi4pywrapper.py | 50 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 49 insertions(+), 1 deletion(-)

diff --git a/gpaw/mpi4pywrapper.py b/gpaw/mpi4pywrapper.py
index 442b5bb..38a5acd 100644
--- a/gpaw/mpi4pywrapper.py
+++ b/gpaw/mpi4pywrapper.py
@@ -1,8 +1,11 @@
 try:
-    from mpi4py.MPI import Request, SUM, MAX, IN_PLACE
+    from mpi4py.MPI import (Request, SUM, MAX, MIN, IN_PLACE, IDENT,
+                            CONGRUENT, SIMILAR, UNEQUAL)
 except ImportError:
     pass
 
+import numpy as np
+
 
 class MPI4PYWrapper:
     def __init__(self, comm, parent=None):
@@ -22,6 +25,9 @@ def new_communicator(self, ranks):
     def max_scalar(self, a, root=-1):
         return self.sum_scalar(a, root=-1, _op=MAX)
 
+    def min_scalar(self, a, root=-1):
+        return self.sum_scalar(a, root=-1, _op=MIN)
+
     def sum_scalar(self, a, root=-1, _op=None):
         if _op is None:
             _op = SUM
@@ -40,6 +46,24 @@ def sum(self, a, root=-1):
             else:
                 self.comm.Reduce(a, None, root=root, op=SUM)
 
+    def max(self, a, root=-1):
+        if root == -1:
+            self.comm.Allreduce(IN_PLACE, a, op=MAX)
+        else:
+            if root == self.rank:
+                self.comm.Reduce(IN_PLACE, a, root=root, op=MAX)
+            else:
+                self.comm.Reduce(a, None, root=root, op=MAX)
+
+    def min(self, a, root=-1):
+        if root == -1:
+            self.comm.Allreduce(IN_PLACE, a, op=MIN)
+        else:
+            if root == self.rank:
+                self.comm.Reduce(IN_PLACE, a, root=root, op=MIN)
+            else:
+                self.comm.Reduce(a, None, root=root, op=MIN)
+
     def scatter(self, a, b, root):
         self.comm.Scatter(a, b, root)
 
@@ -92,5 +116,29 @@ def name(self):
     def barrier(self):
         self.comm.barrier()
 
+    def abort(self, errcode):
+        self.comm.Abort(errcode)
+
+    def compare(self, othercomm):
+        code = self.comm.Compare(othercomm.comm)
+        if code == IDENT:
+            return 'ident'
+        elif code == CONGRUENT:
+            return 'congruent'
+        elif code == SIMILAR:
+            return 'similar'
+        elif code == UNEQUAL:
+            return 'unequal'
+        else:
+            raise ValueError(f'Unknown compare code {code}')
+
+    def translate_ranks(self, other, ranks):
+        return np.array(
+            self.comm.Get_group().Translate_ranks(ranks,
+                                                  other.comm.Get_group()))
+
+    def get_members(self):
+        return self.translate_ranks(self.parent, np.arange(self.size))
+
     def get_c_object(self):
         return self.comm
